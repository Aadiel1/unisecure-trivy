name: Build, Scan, and Push Docker Image

on:
  push:
    branches:
      - main

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Log in to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3. Build Docker image
      - name: Build Docker image
        run: |
          IMAGE_NAME=ghcr.io/aadiel1/unisecure-trivy/simple-node-app:latest
          docker build -t $IMAGE_NAME .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # 4. Install Trivy
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          version: v0.65.0
          cache: true

      # 5. Scan Docker image for CRITICAL vulnerabilities
      - name: Scan Docker image
        id: trivy
        run: |
          trivy image --severity CRITICAL --no-progress --format json -o trivy-report.json ${{ env.IMAGE_NAME }}
          COUNT=$(jq '.Results[].Vulnerabilities | length' trivy-report.json | awk '{s+=$1} END {print s}')
          echo "Vulnerabilities found: $COUNT"
          echo "count=$COUNT" >> $GITHUB_OUTPUT

      # 6. Report vulnerabilities
      - name: Report vulnerabilities
        run: |
          COUNT="${{ steps.trivy.outputs.count }}"
          echo "Found high/critical vulnerabilities: $COUNT"

          if [ "$COUNT" -eq "0" ]; then
            echo "No high or critical vulnerabilities found. You are good to deploy."
          else
            echo "High or Critical vulnerabilities found! Check trivy-report.json"
            cat trivy-report.json
          fi

      # 7. Push Docker image only if no high/critical vulnerabilities
      - name: Push Docker image
        if: ${{ steps.trivy.outputs.count == '0' }}
        run: |
          echo "Pushing Docker image as no high/critical vulnerabilities were found."
          docker push ${{ env.IMAGE_NAME }}
